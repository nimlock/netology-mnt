---
  - name: Prepare infrastructure
    hosts: hypervisors
    gather_facts: no
    tags: init
    tasks:
      - name: Get VM for services
        include_tasks: init.yml
        loop: "{{ services_infra.keys() }}"
        loop_control:
          loop_var: nodename
      - name: Write inventory from template
        ansible.builtin.template: 
          src: inventory.prod.yml.j2
          dest: "{{ playbook_dir }}/inventory/prod.yml"
          mode: '0644'
        delegate_to: 127.0.0.1
  - name: Check connetions to servers
    hosts: all:!hypervisors
    tags: init
    tasks:
      - name: Ping to servers
        ping:
  - name: Install Java
    hosts: all:!hypervisors
    tasks:
      - name: Set facts for Java 8 vars
        set_fact:
          java_home: "/opt/jdk/{{ java_jdk_version }}"
        tags: java
      - name: Upload .tar.gz file containing binaries from local storage
        copy:
          src: "{{ java_oracle_jdk_package }}"
          dest: "/tmp/jdk-{{ java_jdk_version }}.tar.gz"
          mode: '0644'
        register: download_java_binaries
        until: download_java_binaries is succeeded
        tags: java
      - name: Ensure installation dir exists
        become: true
        file:
          state: directory
          path: "{{ java_home }}"
          mode: '0755'
        tags: java
      - name: Extract java in the installation directory
        become: true
        unarchive:
          copy: false
          src: "/tmp/jdk-{{ java_jdk_version }}.tar.gz"
          dest: "{{ java_home }}"
          extra_opts: [--strip-components=1]
          creates: "{{ java_home }}/bin/java"
          mode: '0755'
        tags:
          - skip_ansible_lint
          - java
      - name: Export environment variables
        become: true
        template:
          src: jdk.sh.j2
          dest: /etc/profile.d/jdk.sh
          mode: '0755'
        tags: java
  - name: Install Elasticsearch
    hosts: elasticsearch
    tasks:
      - name: Check state of Elasticsearch archive
        stat:
          path: "{{ elastic_archive_path }}"
        register: elastic_archive_state
        tags: elastic
      - name: Upload tar.gz Elasticsearch from remote URL
        get_url:
          url: "https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-{{ elastic_version }}-linux-x86_64.tar.gz"
          dest: "{{ elastic_archive_path }}"
          mode: 0644
          timeout: 60
          force: true
        register: get_elastic
        until: get_elastic is succeeded
        tags: elastic
        when: not elastic_archive_state.stat.exists
      - name: Create directrory for Elasticsearch
        become: true
        file:
          state: directory
          path: "{{ elastic_home }}"
          mode: '0755'
          owner: "{{ ansible_user }}"
        tags: elastic
      - name: Extract Elasticsearch in the installation directory
        become: true
        unarchive:
          copy: false
          src: "{{ elastic_archive_path }}"
          dest: "{{ elastic_home }}"
          extra_opts: [--strip-components=1]
          creates: "{{ elastic_home }}/bin/elasticsearch"
          owner: "{{ ansible_user }}"
        tags:
          - skip_ansible_lint
          - elastic
      - name: Set environment Elastic
        become: yes
        template:
          src: templates/elk.sh.j2
          dest: /etc/profile.d/elk.sh
          mode: '0755'
        tags: elastic
      - name: Generate config for Elasticsearch
        become: yes
        template:
          src: elasticsearch.yml.j2
          dest: "{{ elastic_home }}/config/elasticsearch.yml"
          mode: '0644'
          owner: "{{ ansible_user }}"
        tags: elastic
  - name: Install Kibana
    hosts: kibana
    tasks:
      - name: Check state of Kibana archive
        stat:
          path: "{{ kibana_archive_path }}"
        register: kibana_archive_state
        tags: kibana
      - name: Upload tar.gz Kibana from remote URL
        get_url:
          url: "https://artifacts.elastic.co/downloads/kibana/kibana-{{ kibana_version }}-linux-x86_64.tar.gz"
          dest: "{{ kibana_archive_path }}"
          mode: 0644
          timeout: 60
          force: true
        register: get_kibana
        until: get_kibana is succeeded
        tags: kibana
        when: not kibana_archive_state.stat.exists
      - name: Create directrory for Kibana
        become: true
        file:
          state: directory
          path: "{{ kibana_home }}"
          mode: '0755'
          owner: "{{ ansible_user }}"
        tags: kibana
      - name: Extract Kibana in the installation directory
        become: true
        unarchive:
          copy: false
          src: "{{ kibana_archive_path }}"
          dest: "{{ kibana_home }}"
          extra_opts: [--strip-components=1]
          creates: "{{ kibana_home }}/bin/kibana"
          owner: "{{ ansible_user }}"
        tags:
          - skip_ansible_lint
          - kibana
      - name: Set environment Kibana
        become: yes
        template:
          src: templates/kbn.sh.j2
          dest: /etc/profile.d/kbn.sh
          mode: '0755'
        tags: kibana
      - name: Generate config for Kibana
        become: yes
        template:
          src: kibana.yml.j2
          dest: "{{ kibana_home }}/config/kibana.yml"
          mode: '0644'
          owner: "{{ ansible_user }}"
        tags: kibana
  - name: Install Logstash
    hosts: logstash
    tags: logstash
    tasks:
      - name: Check state of Logstash archive
        stat:
          path: "{{ logstash_archive_path }}"
        register: logstash_archive_state      
      - name: Upload tar.gz Logstash from remote URL
        get_url:
          url: "https://artifacts.elastic.co/downloads/logstash/logstash-{{ logstash_version }}-linux-x86_64.tar.gz"
          dest: "{{ logstash_archive_path }}"
          mode: 0644
          timeout: 60
          force: true
        register: get_logstash
        until: get_logstash is succeeded
        when: not logstash_archive_state.stat.exists
      - name: Create directrory for Logstash
        become: true
        file:
          state: directory
          path: "{{ logstash_home }}"
          mode: '0755'
          owner: "{{ ansible_user }}"
      - name: Extract Logstash in the installation directory
        become: true
        unarchive:
          copy: false
          src: "{{ logstash_archive_path }}"
          dest: "{{ logstash_home }}"
          extra_opts: [--strip-components=1]
          creates: "{{ logstash_home }}/bin/logstash"
          owner: "{{ ansible_user }}"
        tags: skip_ansible_lint
      - name: Set environment Logstash
        become: yes
        template:
          src: templates/logstash.sh.j2
          dest: /etc/profile.d/logstash.sh
          mode: '0755'
      - name: Generate config for Logstash
        become: yes
        template:
          src: logstash.conf.j2
          dest: "{{ logstash_home }}/config/logstash.conf"
          mode: '0644'
          owner: "{{ ansible_user }}"
